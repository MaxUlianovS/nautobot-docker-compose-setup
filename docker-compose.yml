services:
  nautobot:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NAUTOBOT_VERSION: "${NAUTOBOT_VERSION}"
        PYTHON_VER: "${PYTHON_VER}"
    image: HCB/nautobot-docker-compose:local
    command: "nautobot-server runserver 0.0.0.0:8080"
    ports:
      - "8080:8080"
    volumes:
      - "./secrets:/opt/nautobot/secrets"
      - "./config/nautobot_config.py:/opt/nautobot/nautobot_config.py"
      - "./jobs:/opt/nautobot/jobs"
    env_file:
      - "local.env"
      - "creds.env"
    depends_on:
      - "db"
      - "redis"
    healthcheck:
      interval: "30s"
      timeout: "10s"
      start_period: "60s"
      retries: 3
      test: ["CMD", "true"]
    restart: unless-stopped
    tty: true

  celery_worker:
    image: HCB/nautobot-docker-compose:local
    entrypoint:
      - "sh"
      - "-c"
      - "nautobot-server celery worker -l $$NAUTOBOT_LOG_LEVEL --events"
    volumes:
      - "./secrets:/opt/nautobot/secrets"
      - "./config/nautobot_config.py:/opt/nautobot/nautobot_config.py"
      - "./jobs:/opt/nautobot/jobs"
    env_file:
      - "local.env"
      - "creds.env"
    depends_on:
      nautobot:
        condition: "service_healthy"
    healthcheck:
      interval: "30s"
      timeout: "10s"
      start_period: "30s"
      retries: 3
      test:
        [
          "CMD",
          "bash",
          "-c",
          "nautobot-server celery inspect ping --destination celery@$$HOSTNAME"
        ]
    restart: unless-stopped
    tty: true

  celery_beat:
    image: HCB/nautobot-docker-compose:local
    entrypoint:
      - "sh"
      - "-c"
      - "nautobot-server celery beat -l $$NAUTOBOT_LOG_LEVEL"
    env_file:
      - "local.env"
      - "creds.env"
    depends_on:
      nautobot:
        condition: "service_healthy"
    healthcheck:
      disable: true
    restart: unless-stopped
    tty: true

  redis:
    image: "redis:6-alpine"
    command:
      - "sh"
      - "-c"
      - "redis-server --appendonly yes --requirepass $$NAUTOBOT_REDIS_PASSWORD"
    env_file:
      - "local.env"
      - "creds.env"
    restart: unless-stopped

  db:
    image: "postgres:13-alpine"
    env_file:
      - "local.env"
      - "creds.env"
    command:
      - "-c"
      - "max_connections=1000"
    volumes:
      - "postgres_data:/var/lib/postgresql/data"
    healthcheck:
      test: "pg_isready --username=$$POSTGRES_USER --dbname=$$POSTGRES_DB"
      interval: "10s"
      timeout: "5s"
      retries: 10
    restart: unless-stopped

volumes:
  postgres_data: {}
